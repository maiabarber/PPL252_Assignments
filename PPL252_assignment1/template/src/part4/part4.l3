#lang racket/base

;; last-item
;; Signature: last-item(lst)
;; Type: (list) -> any
;; Purpose: Returns the last element in a non-empty list.
;; Pre-conditions: lst is a non-empty list.
;; Tests: (display (last-item '(1 2 3))) ; => 3; (display (last-item '(a))) ; => a
(define last-item
	(lambda(lst)
		(if(null? (cdr lst))
			(car lst)
			(last-item (cdr lst)))))

;; remove-last-item
;; Signature: remove-last-item(lst)
;; Type: (list) -> list
;; Purpose: Returns a copy of lst without its last element.
;; Pre-conditions: lst contains at least one element.
;; Tests:(display (remove-last-item '(1 2 3))) ; => (1 2); (display (remove-last-item '(a))) ; => ()
(define remove-last-item
	(lambda(lst)
		(if(null? (cdr lst))
			'()
			(cons (car lst) (remove-last-item (cdr lst))))))

;; rotate-nth
;; Signature: rotate-nth(lst, n)
;; Type: (list, number) -> list
;; Purpose: Rotates the list n times by moving the last element to the front.
;; Pre-conditions: n is a non-negative integer; lst is a non-empty list.
;; Tests: (display (rotate-nth '(1 2 3) 1)) ; => (3 1 2); (display (rotate-nth '(a b c) 2)) ; => (b c a); (display (rotate-nth '(1 b 3) 3)) ; => (1 b 3)
(define rotate-nth
	(lambda(lst n)
	(if(null? lst)
	'()
		(if(= n 0)
			lst
			(rotate-nth (cons (last-item lst) (remove-last-item lst)) (- n 1))))))